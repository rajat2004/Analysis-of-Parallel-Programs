//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import utils.PEGNode;
import utils.ParallelExecutionGraph;
import utils.Utils;

import java.util.*;

/**
 * Answers MHP Queries
 */
public class MHPQuery<R,A> extends GJDepthFirst<R,A> {
    public static boolean debug = true;

    private void print(String s) {
        if (debug)
            System.out.println(this.getClass().getSimpleName() + ": " + s);
    }

    ParallelExecutionGraph peg;

    public MHPQuery(ParallelExecutionGraph peg) {
        this.peg = peg;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> Identifier()
     * f2 -> "mhp?"
     * f3 -> Identifier()
     * f4 -> <SCOMMENT2>
     */
    public R visit(Query n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
//        n.f1.accept(this, argu);
        String label1 = n.f1.f0.tokenImage;
        n.f2.accept(this, argu);
//        n.f3.accept(this, argu);
        String label2 = n.f3.f0.tokenImage;
        n.f4.accept(this, argu);

        Utils.print("\n");

        HashSet<PEGNode> l1_nodes = getNodesWithLabel(label1);
        HashSet<PEGNode> l2_nodes = getNodesWithLabel(label2);

        for(PEGNode l1_node : l1_nodes) {
            print("L1 Node: " + l1_node + ", MHP nodes: ");
            l1_node.mhp_nodes.forEach(node -> Utils.print("\t" + node));
            for(PEGNode l2_node : l2_nodes) {
                if (l1_node.mhp_nodes.contains(l2_node)) {
                    print("Found MHP nodes: " + l1_node + " ------- " + l2_node);
                    System.out.println("Yes");
                    return _ret;
                }
            }
        }

        print("No MHP nodes found!");
        System.out.println("No");

        return _ret;
    }

    private HashSet<PEGNode> getNodesWithLabel(String label) {
        // TODO: Verify if there can be multiple nodes with same label, currently assuming yes
        print("Label: " + label);

        HashSet<PEGNode> label_nodes = new HashSet<>();
        peg.all_nodes.forEach(node -> {
            if (node.label!=null && node.label.equals(label))
                label_nodes.add(node);
        });

        print("Nodes: " + label_nodes);
        return label_nodes;
    }

}
